@model View.ViewModels.CounterSalesViewModel

@{
    Layout = "_LayoutAdmin";
}

@{
    int stt = 1;
}
<div class="container-fluid">
    <div class="card shadow-sm rounded">
        <div class="card-body">
            <div id="orderForm" class="d-inline-block">
                <!-- Lưu staffId vào input ẩn để sử dụng trong script -->
                <input type="hidden" id="staffId" value="@Model.StaffId" />
                <button id="createOrderBtn" class="btn btn-md btn-success">Create New Order</button>
            </div>
            <hr />
            <div>
            <div class="row mb-8 align-items-center">
                <div class="col-md-8 text-start">
                     @if (Model.OrderId != null)
                    {
                        <h3 class="text-muted">
                            Order Information: 
                        </h3>
                        <h5 class="text-muted">Order Id : <span id="orderHeader"> @Model.OrderId</span>  </h5>
                        <h5 class="text-muted">Staff : <span>@Model.CreateBy</span> </h5>
                    }
                    else{
                        <h3 id="orderHeader" class="text-muted">
                            #N/A
                        </h3>
                    }
                </div>

                <div class="col-md-4 text-end">
                    <!-- Kiểm tra nếu orderId tồn tại thì hiển thị nút Add Product -->
                    @if (Model.OrderId != null)
                    {
                        <div id="addProductSection" class="d-inline-block">
                            <button id="addProductBtn" class="btn btn-md btn-primary">Add Product For This Order</button>
                        </div>
                    }
                    else
                    {
                        <!-- Nút để hiển thị Modal -->
                        <div id="addProductSection" class="d-inline-block">
                            <button id="addProductBtn"
                                class="btn btn-md btn-primary" hidden> Add Product For This Order </button>
                        </div>
                    }
                </div>
            </div>
            </div>
            <hr />
            <div class="container">
    <div class="row">
        <div class="col-12">
            @if (Model == null || (Model.orders == null || !Model.orders.Any()))
            {
                <!-- Nếu không có đơn hàng, hiển thị trang trống hoặc thông báo -->
                <div class="empty-page">
                    <h4 class="text-center text-muted">No orders found.</h4>
                    <p class="text-center">Your order history is empty.</p>
                </div>
            }
            else
            {
                <!-- Hiển thị danh sách đơn hàng nếu có -->
                <ul class="nav nav-pills" id="orderTabs" role="tablist">
                    @foreach (var order in Model.orders)
                    {
                        
                        <li class="nav-item" role="presentation">
                            <button class="nav-link d-flex justify-content-between align-items-center"
                                    id="tab-@order.Id"
                                    data-bs-toggle="pill"
                                    data-order-id="@order.Id"
                                    type="button"
                                    role="tab">
                                <span>Order - @stt</span>
                                <span class="btn-close delete-order-btn" aria-label="Close" data-order-id="@order.Id"></span>
                            </button>
                        </li>
                        stt++;
                    }
                </ul>
            }
        </div>
    </div>

    <hr />

     <div class="row mt-4">
        <div class="col-12">
            <div class="tab-content" id="orderTabsContent">
                <div id="orderDetailsContent" class="tab-pane fade show active">
                    <h3 class="text-center text-muted">Select an order to view details.</h3>
                </div>
                <div id="totalPriceContent" class="mt-3 text-end fw-bold fs-5">
                    Total Price: @Model.orders.FirstOrDefault()?.Price
                </div>
            </div>
        </div>
    </div>

</div>
            <hr />
            <div class="container">
    <div class="row">
        <!-- Khu vực nhập địa chỉ và số điện thoại (Chiếm 6 cột) -->
        <div class="col-md-6">
            <div id="customerInfo" class="mt-4 border p-3">
                <h4>Customer Information</h4>
                <button type="button" class="btn btn-info mt-2" id="isCustomerButton">Is Customer</button>

                <!-- Dòng chứa các thông tin địa chỉ và số điện thoại -->
                <div class="row">
                    <!-- Thành phố -->
                    <div class="col-md-6 mb-3">
                        <label for="city" class="form-label">City</label>
                        <select class="form-select" id="city" required>
                            <option value="">Select City</option>
                            <option value="Hanoi">Hanoi</option>
                            <option value="HoChiMinh">Ho Chi Minh</option>
                            <option value="DaNang">Da Nang</option>
                        </select>
                    </div>

                    <!-- Quận/Huyện -->
                    <div class="col-md-6 mb-3">
                        <label for="district" class="form-label">District</label>
                        <select class="form-select" id="district" required>
                            <option value="">Select District</option>
                            <option value="DongDa">Dong Da</option>
                            <option value="HaiBaTrung">Hai Ba Trung</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <!-- Phường/Xã -->
                    <div class="col-md-6 mb-3">
                        <label for="ward" class="form-label">Ward</label>
                        <select class="form-select" id="ward" required>
                            <option value="">Select Ward</option>
                            <option value="CuaNam">Cua Nam</option>
                            <option value="TrieuKhuc">Trieu Khuc</option>
                        </select>
                    </div>

                    <!-- Địa chỉ cụ thể -->
                    <div class="col-md-6 mb-3">
                        <label for="specificAddress" class="form-label">Specific Address</label>
                        <input type="text" class="form-control" id="specificAddress" placeholder="Enter your specific address" required />
                    </div>

                    <!-- Số điện thoại -->
                    <div class="col-md-6 mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phone" placeholder="Enter your phone number" required />
                    </div>

                    <!-- Ghi chú -->
                    <div class="col-md-6 mb-3">
                        <label for="note" class="form-label">Note</label>
                        <textarea class="form-control" id="note" rows="3" placeholder="Any additional note for the delivery?"></textarea>
                    </div>

                </div>


            </div>
        </div>

        <!-- Khu vực thông tin đơn hàng (Chiếm 6 cột) -->
        <div class="col-md-6">
            <div id="orderInfo" class="mt-4 border p-3">
                <h4>Order Information</h4>

                <!-- Dòng chứa các thông tin giao hàng và lựa chọn vận chuyển -->
                <div class="row">
                    <!-- Delivery Option -->
                    <div class="col-md-6 mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="deliveryOption" />
                            <label class="form-check-label" for="deliveryOption">Choose Delivery</label>
                        </div>
                    </div>
                    <!-- Hiển thị thông tin đơn hàng -->
                    <div class="col-md-6 mb-3">
                        <div id="orderDetailsText">Order summary will be shown here.</div>
                    </div>
                </div>

                <!-- Dòng chứa thông tin voucher -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <!-- Voucher Input -->
                        <label for="voucherCode" class="form-label">Voucher Code</label>
                        <input type="text" class="form-control" id="voucherCode" placeholder="Enter your voucher code" />
                        <button type="button" class="btn btn-primary mt-2" id="applyVoucherButton">Apply Voucher</button>
                    </div>

                    <!-- Hiển thị tổng tiền -->
                    <div class="col-md-6 mb-3">
                        <p><strong>Total Price:</strong> <span id="totalPrice">0</span></p>
                        <p><strong>Shipping Fee:</strong> <span id="shippingFee">10</span></p>
                        <p><strong>Discount (Voucher):</strong> <span id="discount">0</span></p>
                        <p><strong>Final Price:</strong> <span id="finalPrice">0</span></p>
                    </div>

                </div>
                <!-- Dòng chứa phương thức thanh toán và check out -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <!-- Phương thức thanh toán -->
                        <label for="paymentMethod" class="form-label">Payment Method</label>
                        <div class="payment-method-icons">
                            <img src="/path/VNPay_Logo.png" style="width : auto; height : 25px" alt="VNPay" class="payment-logo" />
                            <img src="/path/MoMo_Logo.png" style="width : auto; height: 25px" alt="MoMo" class="payment-logo" />
                            <img src="/path/ZaloPay_Logo.png" style="width : auto; height: 25px" alt="ZaloPay" class="payment-logo" />
                        </div>

                        <select class="form-select" id="paymentMethod" required>
                            <option value="">Select Payment Method</option>
                            <option value="CreditCard">Credit Card</option>
                            <option value="PayPal">PayPal</option>
                            <option value="CashOnDelivery">Cash on Delivery</option>
                        </select>
                    </div>

                    <!-- Nút Check Out -->
                    <div class="col-md-6 mb-3 d-flex align-items-end">
                        <button type="button" class="btn btn-success w-100" id="checkOutButton">Check Out</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
        </div>
    </div>
</div>



<!-- Modal thêm sản phẩm -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg"> <!-- Thay đổi kích thước modal thành modal-lg -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Add Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Thanh tìm kiếm sản phẩm -->
                <div class="mb-3">
                    <input type="text" class="form-control" id="searchProduct" placeholder="Search for products..." onkeyup="filterProducts()" />
                </div>

                <!-- Bảng hiển thị thông tin sản phẩm -->
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Image</th>
                            <th>Price</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Các dòng dữ liệu sản phẩm sẽ được thêm vào ở đây -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button"
                    class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <style>
        .nav-link {
            position: relative; /* Định vị tương đối để chứa nút */
            padding-right: 2rem; /* Tạo khoảng trống cho nút */
            font-size: 16px;
            border-radius: 8px;
            display: flex;
            align-items: center;
        }

            .nav-link .btn-close {
                position: absolute;
                right: 0.5rem; /* Đặt gần mép phải */
                top: 50%;
                transform: translateY(-50%);
                background-color: transparent; /* Mặc định trong suốt */
                border: none;
                font-size: 14px; /* Kích thước chữ nhỏ */
                color: black; /* Màu chữ mặc định */
                cursor: pointer;
                padding: 0;
                transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
                width: 20px; /* Kích thước vùng bấm */
                height: 20px;
                text-align: center;
            }

                .nav-link .btn-close:hover {
                    background-color: #f44336; /* Màu đỏ khi hover */
                    color: white; /* Màu chữ khi hover */
                    border-radius: 4px; /* Bo góc nhẹ khi hover */
                }

    </style>

    <style>
        #customerInfo, #orderInfo {
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        /* Style cho các nút */
        #deliverOrderButton {
            background-color: #28a745;
            color: white;
        }

        #noDeliveryButton {
            background-color: #6c757d;
            color: white;
        }

        /* Đảm bảo các input không chiếm quá nhiều chiều rộng */
        .form-control {
            max-width: 100%;
        }

        .payment-method-icons {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin-top: 10px;
        }

        .payment-logo {
            width: 60px; /* Điều chỉnh kích thước logo */
            height: auto;
        }

    </style>
}

@section Scripts {
<!---------------------------------------->

    <!--  Phần script để tạo ra tab-order -->
<script>
        document.addEventListener("DOMContentLoaded", () => {
    // Hàm tạo đơn hàng mới bởi nhân viên
    function createOrderByStaff() {
        // Lấy staffId từ input ẩn
        const staffId = document.getElementById("staffId").value;

        if (!staffId) {
            alert("Staff ID is missing. Please log in again.");
            return;
        }

        const customerId = document.querySelector("#customerId")?.value || null;
        const voucherId = document.querySelector("#voucherId")?.value || null;

        const orderData = {
            orderItems: [...document.querySelectorAll(".order-item")].map(item => ({
                productId: item.getAttribute("data-product-id"),
                quantity: item.querySelector(".quantity-input").value
            })),
            totalPrice: document.querySelector("#totalPrice").value,
            status: 0 // Trạng thái đơn hàng
        };

        // Xây dựng URL với query parameters
        let url = `https://localhost:7280/api/Orders/create-by-staff?staffId=${staffId}`;
        if (customerId) url += `&customerId=${customerId}`;
        if (voucherId) url += `&voucherId=${voucherId}`;

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(orderData),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to create the order");
                }
                return response.json();
            })
            .then(data => {
                location.reload(); 
            })
            .catch(error => {
                console.error("Error creating order:", error);
                alert("Failed to create the order. Please try again.");
            });
    }

    // Gắn sự kiện vào nút Create Order
    const createOrderBtn = document.getElementById("createOrderBtn");
    if (createOrderBtn) {
        createOrderBtn.addEventListener("click", createOrderByStaff);
    }
});

    </script>


    <!-- Phần script để tạo ra Hiển thị ra order và xóa order -->
<script>

    document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll("#orderTabs .nav-link");
    const orderHeader = document.querySelector("h3#orderHeader");

    let hasReloaded = false;

    

    tabs.forEach(tab => {
        tab.addEventListener("click", function () {
            const orderId = this.getAttribute("data-order-id");

            const deleteButton = this.parentElement.querySelector(".delete-order-btn");

            // Hiển thị nút xóa của tab được chọn, ẩn nút xóa của các tab khác
            document.querySelectorAll(".delete-order-btn").forEach(btn => (btn.style.display = "none"));
            if (deleteButton) deleteButton.style.display = "inline-block";

            // Cập nhật tiêu đề Order
            if (orderHeader) {
                orderHeader.textContent = `Order: ${orderId}`;
            }

            // Gọi API để lấy chi tiết đơn hàng
            loadOrderDetails(orderId);
        });
    });

// Gắn sự kiện cho nút xóa
    document.querySelectorAll(".delete-order-btn").forEach(button => {
        button.addEventListener("click", function (event) {
            event.stopPropagation(); // Ngăn không cho sự kiện click tab được kích hoạt
            const orderId = this.getAttribute("data-order-id");
            deleteOrder(orderId);
        });
    });

    // Auto-load first tab  
    const firstTab = tabs[0];
    if (firstTab) {
        firstTab.click();
    }

    
});

// Hàm xóa Order
function deleteOrder(orderId) {
    if (!confirm("Are you sure you want to delete this order?")) return;

    fetch(`https://localhost:7280/api/Orders/DeleteOrderById?id=${orderId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Failed to delete the order");
        }
        location.reload(); // Reload lại trang sau khi xóa
    })
    .catch(error => {
        console.error("Error deleting order:", error);
        alert("Failed to delete the order. Please try again.");
    });
}

// Hàm tải chi tiết đơn hàng
function loadOrderDetails(orderId) {
    const url = `https://localhost:7280/api/OrderDetails/GetOrderDetailByOrderId?orderId=${orderId}`;
    
    fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        const contentDiv = document.getElementById("orderDetailsContent");
        contentDiv.innerHTML = "";  // Clear previous content

        if (data && data.length > 0) {
            // Xây dựng bảng chi tiết đơn hàng
            const table = `
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>#</th> <!-- Số thứ tự -->
                            <th>Image</th>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Size</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>TotalPrice</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${data.map((item, index) => `
                            <tr data-id="${item.id}">
                                <td>${index + 1}</td> <!-- Số thứ tự -->
                                <td>
                                    <img src="${item.product?.images?.[0]?.url ?? '/path/404.png'}" 
                                         alt="${item.product?.name ?? 'No Name'}" 
                                         class="img-thumbnail" style="width: 120px; height: auto;" />
                                </td>
                                <td>${item.product?.name ?? 'Unknown Product'}</td>
                                <td>${item.product?.category?.name ?? 'N/A'}</td>
                                <td>${item.product?.brand?.name ?? 'N/A'}</td>
                                <td>${item.product?.size?.value ?? 'N/A'}</td>
                                <td>${item.product?.price ?? '0.00'}</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-outline-secondary decrease-quantity mx-1" data-id="${item.productId}" data-price="${item.product?.price ?? 0}" type="button">-</button>
                                        <input type="number" class="form-control quantity-input text-center" data-id="${item.productId}" value="${item.quatity ?? 1}" min="1" style="width: 60px;" />
                                        <button class="btn btn-outline-secondary increase-quantity mx-1" data-id="${item.productId}" data-price="${item.product?.price ?? 0}" type="button">+</button>
                                    </div>
                                </td>
                                <td class="total-price">${(item.totalPrice ?? (item.quantity ?? 1) * (item.product?.price ?? 0)).toFixed(2)}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm remove-product" data-id="${item.id}">Remove</button>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            contentDiv.innerHTML = table;
            bindCartEvents(orderId);  // Gắn sự kiện cho các nút tăng giảm và xóa sản phẩm
        } else {
            // Hiển thị thông báo không có sản phẩm
            const emptyTable = `
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>#</th> <!-- Số thứ tự -->
                            <th>Image</th>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Size</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>TotalPrice</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="10" class="text-center">
                                <img src="/path/no-product-found.png" 
                                     alt="No Products Found" 
                                     style="width: auto; height: 350px;" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            `;
            contentDiv.innerHTML = emptyTable;
        }
    })
    .catch(error => {
        console.error("Error fetching order details:", error);
        const contentDiv = document.getElementById("orderDetailsContent");
        contentDiv.innerHTML = "<p>Error loading order details. Please try again later.</p>";
    });
}



// Hàm gắn sự kiện cho các nút tăng, giảm số lượng và xóa sản phẩm
function bindCartEvents(orderId) {
    // Gắn sự kiện giảm số lượng sản phẩm
    document.querySelectorAll('.decrease-quantity').forEach(button => {
        button.addEventListener('click', function() {
            const productId = button.getAttribute('data-id');  // Lấy productId từ data-id của nút
            const price = parseFloat(button.getAttribute('data-price')); // Lấy giá sản phẩm
            const quantityInput = document.querySelector(`input[data-id="${productId}"]`);  // Tìm input theo productId

            if (quantityInput) { // Kiểm tra xem input có tồn tại không
                let currentQuantity = parseInt(quantityInput.value, 10);

                // Kiểm tra số lượng hiện tại và đảm bảo không giảm quá thấp
                if (currentQuantity > 1) {
                    quantityInput.value = currentQuantity - 1;
                    updateOrderDetail(orderId, productId, quantityInput.value)
                        .then(() => updateTotalPriceInTable(productId, quantityInput.value, price)); // Cập nhật tổng tiền
                }
            } else {
                console.error(`Quantity input for product ID ${productId} not found.`);
            }
        });
    });

    // Gắn sự kiện tăng số lượng sản phẩm
    document.querySelectorAll('.increase-quantity').forEach(button => {
        button.addEventListener('click', function() {
            const productId = button.getAttribute('data-id');  // Lấy productId từ data-id của nút
            const price = parseFloat(button.getAttribute('data-price')); // Lấy giá sản phẩm
            const quantityInput = document.querySelector(`input[data-id="${productId}"]`);  // Tìm input theo productId

            if (quantityInput) { // Kiểm tra xem input có tồn tại không
                let currentQuantity = parseInt(quantityInput.value, 10);

                // Tăng số lượng lên 1 và cập nhật thông tin
                quantityInput.value = currentQuantity + 1;
                updateOrderDetail(orderId, productId, quantityInput.value)
                    .then(() => updateTotalPriceInTable(productId, quantityInput.value, price)); // Cập nhật tổng tiền
            } else {
                console.error(`Quantity input for product ID ${productId} not found.`);
            }
        });
    });

    // Gắn sự kiện xóa sản phẩm
    document.querySelectorAll('.remove-product').forEach(button => {
        button.addEventListener('click', function() {
            const productId = button.getAttribute('data-id');
            removeProductFromOrder(orderId, productId);
        });
    });

    // Gắn sự kiện nhập trực tiếp vào ô input
    document.querySelectorAll('input[type="number"]').forEach(input => {
        input.addEventListener('input', function() {
            const productId = input.getAttribute('data-id'); // Lấy productId từ data-id của input
            const price = parseFloat(input.getAttribute('data-price')); // Lấy giá sản phẩm
            let currentQuantity = parseInt(input.value, 10);

            // Kiểm tra xem giá trị nhập vào có hợp lệ không (phải là số nguyên và lớn hơn 0)
            if (isNaN(currentQuantity) || currentQuantity <= 0) {
                input.value = 1; // Nếu không hợp lệ, gán lại giá trị mặc định là 1
                currentQuantity = 1;
            }

            // Cập nhật chi tiết đơn hàng
            updateOrderDetail(orderId, productId, currentQuantity)
                .then(() => updateTotalPriceInTable(productId, currentQuantity, price)); // Cập nhật tổng tiền
        });
    });
}

// Cập nhật chi tiết đơn hàng sau khi thay đổi số lượng
function updateOrderDetail(orderId, productId, quantity) {
    const url = `https://localhost:7280/api/OrderDetails/UpdateOrderDetail?orderId=${orderId}&productId=${productId}&quantity=${quantity}`;
    
    return fetch(url, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ quantity: quantity })
    })
    .then(response => {
        // Kiểm tra mã trạng thái HTTP (200-299 là thành công)
        if (response.ok) {
            return response.json(); // Trả về dữ liệu nếu thành công
        } else {
            throw new Error(`Error updating order detail: ${response.statusText}`);
        }
    })
    .then(data => {
        console.log("Order detail updated successfully:", data);
        return data;
    })
    .catch(error => {
        console.error("Error updating order detail:", error);
    });
}


// Cập nhật tổng tiền trong bảng sau khi thay đổi số lượng
function updateTotalPriceInTable(productId, quantity, price) {
    const totalPriceElement = document.querySelector(`tr[data-id="${productId}"] .total-price`);
    if (totalPriceElement) {
        totalPriceElement.textContent = (quantity * price).toFixed(2); // Tính tổng tiền mới
    }
}


// Hàm xóa sản phẩm khỏi đơn hàng
function removeProductFromOrder(orderId, productId) {
    const url = `https://localhost:7280/api/OrderDetails/RemoveProductFromOrder?orderId=${orderId}&productId=${productId}`;
    
    fetch(url, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Error removing product: ${response.statusText}`);
        }
        return response.json();
    })
    .then(() => {
        // Xóa sản phẩm khỏi bảng sau khi xóa thành công
        const row = document.querySelector(`tr[data-id="${productId}"]`);
        if (row) {
            row.remove();
        }
    })
    .catch(error => {
        console.error("Error removing product:", error);
    });
}

    </script>


    <!-- Phần script để tạo ra liên quan đến giao hàng -->

<script>
        document.addEventListener("DOMContentLoaded", function () {
            // Lấy phần tử nút giao hàng và không giao hàng
            const deliverButton = document.getElementById("deliverOrderButton");
            const noDeliverButton = document.getElementById("noDeliveryButton");

            // Lắng nghe sự kiện click trên nút giao hàng
            deliverButton.addEventListener("click", function () {
                const address = document.getElementById("address").value;
                const phone = document.getElementById("phone").value;

                if (!address || !phone) {
                    alert("Please enter both address and phone number.");
                    return;
                }

                // Cập nhật thông tin giao hàng
                updateDeliveryStatus(true, address, phone);
            });

            // Lắng nghe sự kiện click trên nút không giao hàng
            noDeliverButton.addEventListener("click", function () {
                // Cập nhật trạng thái không giao hàng
                updateDeliveryStatus(false);
            });

            // Hàm cập nhật trạng thái giao hàng
            function updateDeliveryStatus(isDelivering, address = "", phone = "") {
                const orderSummary = document.getElementById("orderDetailsText");

                if (isDelivering) {
                    orderSummary.innerHTML = `
                        <strong>Delivery Information:</strong><br />
                        Address: ${address}<br />
                        Phone: ${phone}<br />
                        <span class="text-success">Delivery is selected.</span>
                    `;
                } else {
                    orderSummary.innerHTML = `
                        <strong>No Delivery Selected</strong><br />
                        <span class="text-danger">No delivery option has been selected.</span>
                    `;
                }
            }
        });

    </script>

<script>
    document.getElementById("addProductBtn").addEventListener("click", function() {
    const productModal = new bootstrap.Modal(document.getElementById('productModal'));
    productModal.show();

    // Lấy danh sách sản phẩm và hiển thị trong bảng
    fetch('https://localhost:7280/api/Products')
        .then(response => response.json())
        .then(products => {
            const tableBody = document.getElementById("productTableBody");
            tableBody.innerHTML = ""; // Clear the table before adding new data

            // Duyệt qua danh sách sản phẩm và thêm vào bảng
            try {
    products.forEach(product => {
        const row = document.createElement("tr");

        row.innerHTML = `
            <td>${product.name}</td>
            <td><img src="${product.images?.[0]?.url || '/path/404.png'}" class="img-thumbnail" style="width: 100px; height: auto;"></td>
            <td>${product.price}</td>
            <td>${product.category.name}</td>
            <td>${product.brand.name}</td>
            <td>${product.size.value}</td>
            <td>
                <input type="number" class="form-control quantity-input" id="quantity-${product.id}" value="1" min="1" style="width: 60px;">
            </td>
            <td>
                <button class="btn btn-success" id="addProductBtn-${product.id}">+</button>
            </td>
        `;

        tableBody.appendChild(row);

        document.getElementById(`addProductBtn-${product.id}`).addEventListener("click", function() {
            addOrUpdateOrderDetail(product.id);
        });
    });
} catch (error) {
    console.error("Error processing products:", error);
}
        })
        .catch(error => {
            console.error("Error fetching products:", error);
            alert("Error loading products. Please try again later.");
        });
});

// Chức năng thêm hoặc cập nhật chi tiết đơn hàng
function addOrUpdateOrderDetail(productId) {
    // Lấy orderId từ phần tử HTML (ví dụ: nút hoặc một phần tử có data-order-id)
    const orderElement = document.querySelector('.nav-link.active'); // Hoặc thay bằng selector tương ứng
    if (!orderElement) {
        alert("Order ID not found.");
        return;
    }

    const orderId = orderElement.getAttribute('data-order-id'); // Lấy orderId từ data-order-id
    const quantityElement = document.getElementById(`quantity-${productId}`);

    if (!quantityElement) {
        alert("Quantity input not found.");
        return;
    }

    const quantity = parseInt(quantityElement.value);

    if (quantity <= 0) {
        alert("Quantity must be greater than zero.");
        return; // Dừng nếu quantity không hợp lệ
    }

    // Định dạng URL theo yêu cầu của API (thêm query parameters)
    const url = `https://localhost:7280/api/OrderDetails/AddOrUpdateOrderDetail?orderId=${orderId}&productId=${productId}&quantity=${quantity}`;

    // Gửi request tới API
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        alert("Order detail updated successfully");
        location.reload(); // Reload lại trang nếu thành công
    })
    .catch(error => {
        console.error('Error:', error);
        alert("Error updating order detail. Please try again.");
    });
}


</script>

<!---------------------------------------->

}


