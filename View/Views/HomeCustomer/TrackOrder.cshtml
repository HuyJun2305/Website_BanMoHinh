@using Data.Models
@using View.Utilities.Extensions
@model View.ViewModels.OrderVM
@using System.ComponentModel.DataAnnotations

@{
    ViewData["Title"] = "Track Your Orders";
    Layout = "_LayoutCustomer";

    // Lấy danh sách các trạng thái đơn hàng từ enum OrderStatus
    var orderStatuses = Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().ToList();

    // Danh sách các trạng thái chính
    var mainStatuses = new[] {
        OrderStatus.WaitingForConfirmation,
        OrderStatus.PrepareOrder,
        OrderStatus.OnDelivery,
        OrderStatus.Delivered,
        OrderStatus.Complete,
        OrderStatus.Canceled,
        OrderStatus.Refund
    };
}

<div class="container mt-5">
    <!-- Nav Bar for Order Status -->
    <ul class="nav nav-tabs" id="orderTabs">
        @foreach (var status in mainStatuses)
        {
            <li class="nav-item" role="presentation">
                <a class="nav-link @((status == OrderStatus.WaitingForConfirmation) ? "active" : "")" id="status-@status-tab" data-bs-toggle="tab" href="#status-@status" role="tab" aria-controls="status-@status" aria-selected="@(status == OrderStatus.WaitingForConfirmation ? "true" : "false")">
                    @status.GetDisplayName()
                </a>
            </li>
        }
    </ul>

    <div class="tab-content mt-3" id="orderTabsContent" style="max-height:500px; overflow-y:auto;">
        @foreach (var status in mainStatuses)
        {
            var ordersInStatus = Model.OrdersByStatus.ContainsKey(status) ? Model.OrdersByStatus[status] : new List<Order>();

            <div class="tab-pane fade @((status == OrderStatus.WaitingForConfirmation && ordersInStatus.Any()) ? "show active" : "")" id="status-@status" role="tabpanel" aria-labelledby="status-@status-tab">
                @if (ordersInStatus.Any())
                {
                    <div class="d-flex flex-wrap gap-3 justify-content-start">
                        @foreach (var order in ordersInStatus)
                        {
                            <div class="order-card card shadow-sm" style="width: 350px; margin-bottom: 15px;">
                                <div class="card-body">
                                    <h6 class="card-title"><strong>Ngày đặt:</strong> @order.DayCreate.ToString("dd/MM/yyyy")</h6>
                                    <p><strong>Tổng tiền:</strong> @order.Price.ToString("#,0 VND", new System.Globalization.CultureInfo("vi-VN"))</p>

                                    <div class="mt-3">
                                        <h6><strong>Sản phẩm:</strong></h6>
                                        <ul class="list-group list-group-flush">
                                            @foreach (var detail in order.OrderDetails)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    @detail.Product.Name
                                                    <span class="badge bg-secondary">@detail.Quantity x</span>
                                                </li>
                                            }
                                        </ul>
                                    </div>

                                    <div class="d-flex gap-3 mt-3 justify-content-end">
                                        <button class="btn btn-info btn-sm" onclick="viewOrderDetails('@order.Id')">Chi tiết</button>
                                        @if (order.Status == OrderStatus.WaitingForConfirmation || order.Status == OrderStatus.PrepareOrder)
                                        {
                                            <button class="btn btn-danger btn-sm" onclick="showCancelOrderModal('@order.Id')">Hủy</button>
                                        }
                                        else if (order.Status == OrderStatus.Canceled)
                                        {
                                            <button class="btn btn-primary btn-sm" onclick="reorderOrder('@order.Id')">Đặt lại</button>
                                        }
                                        else if (order.Status == OrderStatus.Complete)
                                        {
                                            if (order.Status == OrderStatus.Refund)
                                            {
                                                <button class="btn btn-primary btn-sm" onclick="reorderOrder('@order.Id')">Đặt lại</button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-warning btn-sm" onclick="refundOrder('@order.Id')">Hoàn trả</button>
                                                <button class="btn btn-primary btn-sm" onclick="reorderOrder('@order.Id')">Đặt lại</button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- Hiển thị hình ảnh và thông báo "No orders found for this status" -->
                    <div class="text-center">
                        <img src="/path/404.png" alt="No Orders" class="img-fluid" style="max-width: 200px;" />
                        <p class="mt-3 text-muted">Không có đơn hàng nào ở trạng thái này !</p>
                    </div>
                }
            </div>
        }
    </div>
</div>
<!-- Modal hiển thị chi tiết đơn hàng -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title fw-bold" id="orderDetailsModalLabel">Chi tiết đơn hàng</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Nội dung chi tiết đơn hàng sẽ được tải động -->
                <div id="orderDetailsContent" class="py-3 text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-danger" id="cancelOrderButton" onclick="showCancelOrderModal(currentOrderId)">Hủy đơn</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal hủy đơn hàng -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title fw-bold" id="cancelOrderModalLabel">Hủy đơn hàng</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Please provide a reason for canceling the order:</p>
                <textarea id="cancelReason" class="form-control" rows="3" placeholder="Enter reason..."></textarea>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-danger" onclick="submitCancelOrder()">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<style>
    .d-flex .btn {
        margin-right: 10px; /* Thêm khoảng cách giữa các nút */
    }

    .order-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
    }

    .container {
        max-width: 1200px;
    }

    .order-card {
        margin-right: 15px;
    }

    .d-flex.flex-wrap {
        gap: 20px; /* Tăng khoảng cách giữa các item */
    }

</style>

@section Scripts {
    <script>
        // Khởi tạo Bootstrap tab chuyển đổi (nếu chưa tự động chạy)
        var myTab = new bootstrap.Tab(document.querySelector('.nav-tabs .active'));
        myTab.show();
    </script>
    <script>
        let currentOrderId = null;

        // Hiển thị modal hủy đơn hàng
        function showCancelOrderModal(orderId) {
            currentOrderId = orderId; // Lưu lại orderId hiện tại
            const modal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
            modal.show(); // Hiển thị modal
        }

        // Gửi yêu cầu hủy đơn hàng
        async function submitCancelOrder() {
            const note = document.getElementById('cancelReason').value.trim();

            if (!note) {
                alert("Please provide a reason for canceling the order.");
                return;
            }

            const encodedNote = encodeURIComponent(note);
            const url = `https://localhost:7280/api/Orders/CancelOrder?orderId=${currentOrderId}&note=${encodedNote}`;

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                if (response.ok) {
                    alert("Order canceled successfully.");
                    location.reload(); // Reload lại trang sau khi hủy thành công
                } else {
                    const errorText = await response.text();
                    alert(`Failed to cancel the order: ${errorText}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert("Error occurred while canceling the order.");
            }
        }

        // Xem chi tiết đơn hàng
        async function viewOrderDetails(orderId) {
            currentOrderId = orderId; // Lưu orderId hiện tại
            const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            modal.show();

            const orderDetailsContent = document.getElementById('orderDetailsContent');
            orderDetailsContent.innerHTML = `
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                `;

            try {
                // Lấy chi tiết đơn hàng
                const response = await fetch(`https://localhost:7280/api/OrderDetails/GetOrderDetailByOrderId?orderId=${orderId}`);

                if (response.ok) {
                    const orderDetails = await response.json();

                    // Lấy dữ liệu kích thước
                    const sizeResponse = await fetch('https://localhost:7280/api/Sizes');
                    const sizes = await sizeResponse.json();

                    const sizeMap = sizes.reduce((map, size) => {
                        map[size.id] = size.value;
                        return map;
                    }, {});

                    if (orderDetails.length === 0) {
                        orderDetailsContent.innerHTML = "<p>No items found for this order.</p>";
                    } else {
                        orderDetailsContent.innerHTML = `
                                <h5 class="text-start fw-bold mb-3">Mã đơn: ${orderId}</h5>
                                <table class="table table-bordered mt-3 text-center">
                                    <thead class="table-light">
                                        <tr>
                                            <th>#</th>
                                            <th>Sản phẩm</th>
                                            <th>Kích cỡ</th>
                                            <th>Số lượng</th>
                                            <th>Tổng tiền</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${orderDetails.map((item, index) => {
                            const sizeValue = sizeMap[item.sizeId] || 'Unknown Size';
                            return `
                                                <tr>
                                                    <td>${index + 1}</td>
                                                    <td>
                                                        <a href="/HomeCustomer/ViewProductDetails/${item.productId}" target="_blank">
                                                            <img src="${item.product.images[0].url}" class="img-thumbnail" style="width: 120px; height: auto;" alt="${item.product.name}">
                                                            <div>${item.product.name}</div>
                                                        </a>
                                                    </td>
                                                    <td>${sizeValue}</td>
                                                    <td>${item.quantity}</td>
                                                    <td>${item.totalPrice.toLocaleString()} VND</td>
                                                </tr>
                                            `;
                        }).join('')}
                                    </tbody>
                                </table>
                            `;
                    }
                } else {
                    orderDetailsContent.innerHTML = "<p>Hiển thị chi tiết đơn thất bại</p>";
                }
            } catch (error) {
                console.error('Lỗi hiển thị dữ liệu:', error);
                orderDetailsContent.innerHTML = "<p>Đã xảy ra lỗi khi tải thông tin chi tiết đơn hàng.</p > ";
            }
        }
    </script>   
    <script>
        function reorderOrder(orderId) {
            const confirmReorder = confirm("Bạn có muốn sắp xếp lại đơn hàng này không?");
    if (confirmReorder) {
                const note = prompt("Nhập bất kỳ ghi chú nào cho đơn hàng mới (tùy chọn):", "Đặt hàng lại mà không cần hướng dẫn đặc biệt");
        fetch(`https://localhost:7280/api/Orders/ReOrder?orderId=${orderId}&note=${encodeURIComponent(note)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            alert(`Đặt hàng thành công! Đơn hàng ${orderId} đã được đặt lại. Ghi chú: ${note}`);
            // Optional: You can update UI here
        })
        .catch(error => {
             alert('Không thể sắp xếp lại đơn hàng.');
        });
    } else {
             alert('Yêu cầu đặt hàng lại đã bị hủy.');
    }
}
function refundOrder(orderId) {
            const confirmRefund = confirm("Bạn có muốn hoàn lại đơn hàng này không?");
    if (confirmRefund) {
       const note = prompt("Vui lòng đính kèm liên kết driver hiển thị hình ảnh sản phẩm :", "Hoàn tiền mà không cần hướng dẫn đặc biệt");
        fetch(`https://localhost:7280/api/Orders/RefundOrder?orderId=${orderId}&note=${encodeURIComponent(note)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
                        alert(`Đã bắt đầu hoàn tiền! Đơn hàng ${orderId} đang được hoàn tiền. Lưu ý: ${note}`);
            // Optional: You can update UI here
        })
        .catch(error => {
                        alert('Không thể xử lý việc hoàn tiền.');
        });
    } else {
                alert('Yêu cầu hoàn tiền đã bị hủy.');
    }
}

    </script>
}
