@model View.ViewModels.ProductIndex

@{
    ViewData["Title"] = "Index";
    Layout = "_LayoutAdmin";
}

<h1>Danh Sách Sản Phẩm</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Tạo Sản Phẩm Mới</a>
</p>
<!-- Search Form -->
<form id="searchForm" style="margin-top: 20px;">
    <div>
        <label for="searchQuery">Tìm kiếm:</label>
        <input type="text" id="searchQuery" name="searchQuery" class="form-select" placeholder="Nhập tên sản phẩm" />
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>STT</th>
            <th>Hình Ảnh</th>
            <th>Tên</th>
            <th>Giá</th>
            <th>Số lượng</th>
            <th>Mô tả</th>
            <th>Kích thước hiện có</th>
            <th>Danh mục</th>
            <th>Thương hiệu</th>
            <th>Chất liệu</th>
            <th>Chức năng</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Products)
        {
            <tr id="@item.Id">
                <td></td>
                <td>
                    <!-- Slide ảnh -->
                    <div id="productCarousel_@item.Id" class="carousel slide" data-ride="carousel" data-interval="3000" style="width: 100px;">
                        <div class="carousel-inner">
                            @foreach (var image in Model.Images.Where(i => i.ProductId == item.Id).Select((value, index) => new { value, index }))
                            {
                                <div class="carousel-item @(image.index == 0 ? "active" : "")">
                                    <img src="@Url.Content(image.value.URL)" alt="NotFound" style="width:100%; height:100px;">
                                </div>
                            }
                        </div>
                    </div>
                </td>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@item.Price.ToString("#,0₫", new System.Globalization.CultureInfo("vi-VN"))</td>
                <td>@Html.DisplayFor(modelItem => item.Stock)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>
                    @if (item.ProductSizes != null && item.ProductSizes.Any())
                    {
                        @foreach (var productSize in item.ProductSizes)
                        {
                            <div>
                                <span class="badge badge-info" style="margin-right: 5px; color:#000">@productSize.Size.Value</span>
                                <span>Stock: @productSize.Stock</span>  
                           </div>
                        }
                    }
                    else
                    {
                        <span>No sizes available</span>
                    }
                </td>
                 <td>@Html.DisplayFor(modelItem => item.Category.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Brand.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Material.Name)</td>
                <td>
                    <button class="btn btn-primary btn-sm" onclick="openStockEditModal('@item.Id', @item.Stock)">Edit Stock</button>
                    <button class="btn btn-warning btn-sm" onclick="openEditModal('@item.Id')">Edit</button>
                    <button class="btn btn-danger btn-sm" data-product-id="@item.Id" onclick="deleteProduct(this)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- Modal Edit -->
<div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Chỉnh Sửa Sản Phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" method="post" id="editProductForm" enctype="multipart/form-data">
                    <input type="hidden" id="editProductId" name="Id" />

                    <!-- Tên Sản Phẩm -->
                    <div class="mb-3">
                        <label for="editProductName" class="form-label">Tên Sản Phẩm</label>
                        <input type="text" class="form-control" id="editProductName" name="Name" required />
                    </div>

                    <!-- Giá -->
                    <div class="mb-3">
                        <label for="editProductPrice" class="form-label">Giá</label>
                        <input type="number" class="form-control" id="editProductPrice" name="Price" required />
                    </div>

                    <!-- Số Lượng -->
                    <div class="mb-3">
                        <label for="editProductStock" class="form-label">Số Lượng</label>
                        <input type="number" class="form-control" id="editProductStock" name="Stock" required />
                    </div>

                    <!-- Danh Mục -->
                    <div class="mb-3">
                        <label for="editProductCategory" class="form-label">Danh Mục</label>
                        <select class="form-control" id="editProductCategory" name="CategoryId" required>
                            <option value="">Chọn danh mục</option>
                            @foreach (var category in (IEnumerable<SelectListItem>)ViewData["CategoryId"])
                            {
                                <option value="@category.Value">@category.Text</option>
                            }
                        </select>
                    </div>

                    <!-- Thương Hiệu -->
                    <div class="mb-3">
                        <label for="editProductBrand" class="form-label">Thương Hiệu</label>
                        <select class="form-control" id="editProductBrand" name="BrandId" required>
                            <option value="">Chọn thương hiệu</option>
                            @foreach (var brand in (IEnumerable<SelectListItem>)ViewData["BrandId"])
                            {
                                <option value="@brand.Value">@brand.Text</option>
                            }
                        </select>
                    </div>

                    <!-- Chất Liệu -->
                    <div class="mb-3">
                        <label for="editProductMaterial" class="form-label">Chất Liệu</label>
                        <select class="form-control" id="editProductMaterial" name="MaterialId" required>
                            <option value="">Chọn chất liệu</option>
                            @foreach (var material in (IEnumerable<SelectListItem>)ViewData["MaterialId"])
                            {
                                <option value="@material.Value">@material.Text</option>
                            }
                        </select>
                    </div>

                    <!-- Kích Thước -->
                    <div class="mb-4">
                        <label for="editProductSize" class="form-label">Kích thước</label>
                        <div id="editProductSizes" class="form-check">
                            <!-- Các checkbox sẽ được nạp từ API hoặc server -->
                        </div>
                    </div>

                    <!-- Mô Tả -->
                    <div class="mb-3">
                        <label for="editProductDescription" class="form-label">Mô Tả</label>
                        <textarea class="form-control" id="editProductDescription" name="Description" rows="3"></textarea>
                    </div>

                    <!-- Hình Ảnh -->
                    <div class="mb-3">
                        <label for="editProductImage" class="form-label">Hình Ảnh</label>
                        <input type="file" class="form-control" id="editProductImage" name="Image" accept="image/*" multiple />
                        <div id="currentImages" class="mt-2">
                            <!-- Các ảnh hiện tại sẽ được hiển thị ở đây -->
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Lưu Thay Đổi</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div id="stockDistributionModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="stockDistributionModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="stockDistributionModalLabel">Phân bổ kho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Ẩn ProductId -->
                <input type="hidden" id="modalProductId" />

                <!-- Hiển thị tổng số lượng kho -->
                <div class="form-group">
                    <label for="modalTotalStock">Tổng số lượng kho:</label>
                    <input type="number" id="modalTotalStock" class="form-control" placeholder="Đang tải..." readonly />
                </div>

                <!-- Container cho các size inputs -->
                <div id="sizeInputsContainer">
                    <!-- Các input SizeId sẽ được thêm vào đây bằng script -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="submitStockDistribution()">Gửi</button>
            </div>
        </div>
    </div>
</div>






@section Scripts{
    <script>
        function deleteProduct(button) {
            var productId = $(button).data('product-id'); // Lấy ID sản phẩm

            // Xác nhận xóa sản phẩm
            if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này?")) {
                // Gửi yêu cầu DELETE tới API
                $.ajax({
                    url: `https://localhost:7280/api/Products?productId=${productId}`,
                    type: 'DELETE',
                    success: function () {
                        toastr.success('Sản phẩm đã được xóa thành công!');
                        location.reload(); // Tải lại trang
                    },
                    error: function () {
                        toastr.error('Không thể xóa sản phẩm. Vui lòng kiểm tra lại.');
                    }
                });
            }
        }
    </script>


    <script>
    // Hàm hiển thị modal chỉnh sửa sản phẩm
    function openEditModal(productId) {
        $.ajax({
            url: `/Products/GetProductById/${productId}`,
            type: 'GET',
            success: function (product) {
                // Gán dữ liệu sản phẩm vào form
                $('#editProductId').val(product.id);
                $('#editProductName').val(product.name);
                $('#editProductPrice').val(product.price);
                $('#editProductStock').val(product.stock);
                $('#editProductDescription').val(product.description);

                // Hiển thị ảnh hiện tại
                let imagePreviews = '';
                if (product.images && product.images.length > 0) {
                    product.images.forEach(image => {
                        imagePreviews += `
            <div class="image-preview" data-image-id="${image.id}" style="position: relative; display: inline-block; margin-right: 10px; margin-bottom: 10px;">
                <img src="${image.url}" alt="Product Image" style="width: auto; height: 100px;" />
                <button type="button" class="btn btn-danger btn-sm badge-delete" onclick="removeImage('${product.id}', '${image.id}')" style="position: absolute; top: 0px; right: 0px; padding: 0; width: 20px; height: 20px; border-radius: 50%; background-color: red; color: white; font-size: 10px; border: none; display: flex; justify-content: center; align-items: center;">
                    X
                </button>
            </div>
        `;
                    });
                } else {
                    imagePreviews = '<p>Chưa có ảnh nào.</p>';
                }
                $('#currentImages').html(imagePreviews);

                // Load danh sách Category, Brand, Material
                loadDropdownData('https://localhost:7280/api/Category', product.categoryId, '#editProductCategory');
                loadDropdownData('https://localhost:7280/api/Brands', product.brandId, '#editProductBrand');
                loadDropdownData('https://localhost:7280/api/Materials', product.materialId, '#editProductMaterial');

                // Load danh sách Sizes
                $.ajax({
                    url: `https://localhost:7280/api/Sizes/GetSizeByStatus`,  
                    type: 'GET',
                    success: function (sizes) {
                        let sizeOptions = '';

                        // Duyệt qua tất cả các size và hiển thị chúng
                        sizes.forEach(size => {
                            // Kiểm tra nếu size đã có trong product.sizes (checked nếu có, bỏ qua nếu không có)
                            const isChecked = product.sizes && product.sizes.some(ps => ps.id === size.id) ? 'checked' : '';

                            sizeOptions += `
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" value="${size.id}" id="size_${size.id}" ${isChecked}>
                                    <label class="form-check-label" for="size_${size.id}">${size.value}</label>
                                </div>
                            `;
                        });

                        // Chèn danh sách tất cả các kích thước vào phần tử có ID editProductSizes
                        $('#editProductSizes').html(sizeOptions);
                    },
                    error: function () {
                        toastr.error('Lỗi khi tải danh sách kích thước.');
                    }
                });

                // Hiển thị modal chỉnh sửa
                $('#editProductModal').modal('show');
            },
            error: function () {
                toastr.error('Lỗi khi tải thông tin sản phẩm.');
            }
        });
    }

    // Hàm tải dữ liệu dropdown
    function loadDropdownData(url, selectedId, targetElement) {
        $.ajax({
            url: url,
            type: 'GET',
            success: function (data) {
                let options = data.map(item => `<option value="${item.id}" ${item.id === selectedId ? 'selected' : ''}>${item.name}</option>`);
                $(targetElement).html(options.join(''));
            },
            error: function () {
                toastr.error('Lỗi khi tải dữ liệu.');
            }
        });
    }

    // Hàm xử lý xóa ảnh
    function removeImage(productId, imageId) {
        if (!confirm('Bạn có chắc chắn muốn xóa ảnh này?')) return;

        

        $.ajax({
            url: `https://localhost:7280/api/Images/${productId}/${imageId}`,
            type: 'DELETE',
            success: function (response) {
                if (response.success) {
                    $(`.image-preview[data-image-id='${imageId}']`).remove();
                    toastr.success('Ảnh đã được xóa thành công.');
                } else {
                    toastr.error('Lỗi khi xóa ảnh.');
                }
            },
            error: function () {
                toastr.error('Đã xảy ra lỗi khi xóa ảnh.');
            }
        });
    }

// Hàm submit cập nhật sản phẩm
$('#editProductForm').on('submit', async function (e) {
    e.preventDefault();

    // Lấy các kích thước đã chọn
    let selectedSizeIds = [];
    $('#editProductSizes input:checked').each(function () {
        selectedSizeIds.push($(this).val());  // Lấy ID size đã chọn
    });

    // Lấy thông tin của sản phẩm từ form
    let product = {
        Id: $('#editProductId').val(),
        Name: $('#editProductName').val(),
        Price: $('#editProductPrice').val(),
        Stock: $('#editProductStock').val(),
        Description: $('#editProductDescription').val(),
        BrandId: $('#editProductBrand').val(),
        MaterialId: $('#editProductMaterial').val(),
        CategoryId: $('#editProductCategory').val()
    };

    let productUpdateDto = {
        Product: product,
        SizeIds: selectedSizeIds
    };

    // Gửi dữ liệu tới backend
    try {
        const response = await fetch(`https://localhost:7280/api/Products/${product.Id}`, {
            method: 'PUT',  
            headers: {
                'Content-Type': 'application/json',  
            },
            body: JSON.stringify(productUpdateDto)
        });

        // Kiểm tra mã trạng thái HTTP (200 OK)
        if (response.ok) {
            toastr.success("Cập nhật sản phẩm thành công!", "Thông báo");
            location.reload();
            $('#editProductModal').modal('hide');
        } else {
            // Nếu không thành công, lấy thông điệp lỗi từ backend
            const errorText = await response.text();  // Chỉ lấy văn bản, không phải JSON
            toastr.error(errorText || "Cập nhật sản phẩm thất bại.", "Lỗi");
        }   
    } catch (error) {
        console.error("Error occurred: ", error);  // Ghi chi tiết lỗi ra console
        toastr.error("Có lỗi xảy ra khi cập nhật sản phẩm.", "Lỗi");
    }
});

</script>

<script>
        function openStockEditModal(productId) {
            // Đặt ProductId vào modal
            $('#modalProductId').val(productId);

            // Xóa các input cũ
            $('#sizeInputsContainer').empty();
            $('#modalTotalStock').val("Đang tải..."); // Hiển thị placeholder khi dữ liệu đang được tải

            // Lấy thông tin Product từ API
            $.ajax({
                url: `https://localhost:7280/api/Products/${productId}`, // API lấy thông tin sản phẩm
                method: 'GET',
                success: function (productResponse) {
                    // Đặt tổng số lượng kho
                    $('#modalTotalStock').val(productResponse.stock);

                    // Lấy danh sách các ProductSize
                    $.ajax({
                        url: `https://localhost:7280/api/Products/GetProductSizes/${productId}`, // API lấy danh sách SizeId
                        method: 'GET',
                        success: function (sizeResponse) {
                            sizeResponse.forEach(productSize => {
                                var inputField = `
                                    <div class="form-group">
                                        <label>Size: ${productSize.value}</label>
                                        <input type="hidden" class="size-id" value="${productSize.sizeId}" />
                                        <input type="number" class="form-control stock-input" placeholder="Enter stock" value="${productSize.stock}" />
                                    </div>
                                `;
                                $('#sizeInputsContainer').append(inputField);
                            });
                            // Mở modal sau khi tất cả dữ liệu đã được tải
                            $('#stockDistributionModal').modal('show');
                        },
                        error: function (error) {
                            toastr.error("Lỗi khi lấy thông tin kích thước sản phẩm.");
                            console.error("Error fetching product sizes:", error);
                        }
                    });
                },
                error: function (error) {
                    toastr.error("Lỗi khi lấy thông tin sản phẩm.");
                    console.error("Error fetching product:", error);
                }
            });
        }

        function submitStockDistribution() {
            const productId = $('#modalProductId').val();
            const totalStock = parseInt($('#modalTotalStock').val());
            const sizeInputs = $('#sizeInputsContainer .form-group');

            const productSizesStock = {};

            sizeInputs.each(function () {
                const sizeId = $(this).find('.size-id').val();
                const stock = parseInt($(this).find('.stock-input').val());

                if (sizeId && !isNaN(stock)) {
                    productSizesStock[sizeId] = stock;
                }
            });

            if (!productId || isNaN(totalStock) || Object.keys(productSizesStock).length === 0) {
                toastr.warning("Vui lòng nhập đầy đủ thông tin trước khi gửi.");
                return;
            }

            // Gửi dữ liệu qua API
            $.ajax({
                url: `https://localhost:7280/api/Products/DistributeStock?productId=${productId}&totalStock=${totalStock}`,
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(productSizesStock),
                success: function () {
                    toastr.success("Phân bổ kho thành công!");
                    $('#stockDistributionModal').modal('hide'); // Đóng modal
                    setTimeout(() => location.reload(), 1000); // Reload lại trang sau 1 giây
                },
                error: function (xhr) {
                    toastr.error("Có lỗi xảy ra khi phân bổ kho: " + xhr.responseText);
                    console.error("Lỗi phân bổ kho:", xhr.responseText);
                }
            });
        }

        // Đóng modal khi nhấn nút "Close"
        $('#stockDistributionModal').on('hidden.bs.modal', function () {
            $('#modalProductId').val('');
            $('#modalTotalStock').val('');
            $('#sizeInputsContainer').empty();
        });

    </script>


}




