@model View.ViewModels.CounterSalesViewModel

@{
    Layout = "_LayoutAdmin";
}

<h1 class="mb-4 text-center">Counter Sales</h1>
<hr />

<div>
    <div id="" class="d-inline-block">
        <button id="" class="btn btn-md btn-success">Create New Order</button>
    </div>

</div>
<hr />
<div>
    <div class="row mb-8 align-items-center">
        <div class="col-md-8 text-start">
             @if (Model.OrderId != null)
            {
                <h3 id="orderHeader" class="text-muted">
                    Order: @Model.OrderId 
                </h3>
            }
        </div>

        <div class="col-md-4 text-end">
            <!-- Kiểm tra nếu orderId tồn tại thì hiển thị nút Add Product -->
            @if (Model.OrderId != null)
            {
                <div id="addProductSection" class="d-inline-block">
                    <button id="addProductBtn" class="btn btn-md btn-primary">Add Product For This Order</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-12">
            @if (Model == null || (Model.orders == null || !Model.orders.Any()))
            {
                <!-- Nếu không có đơn hàng, hiển thị trang trống hoặc thông báo -->
                <div class="empty-page">
                    <h4 class="text-center text-muted">No orders found.</h4>
                    <p class="text-center">Your order history is empty.</p>
                </div>
            }
            else
            {
                <!-- Hiển thị danh sách đơn hàng nếu có -->
                <ul class="nav nav-pills" id="orderTabs" role="tablist">
                    @foreach (var order in Model.orders)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link d-flex justify-content-between align-items-center"
                                    id="tab-@order.Id"
                                    data-bs-toggle="pill"
                                    data-order-id="@order.Id"
                                    type="button"
                                    role="tab">
                                <span>Order - @order.Id</span>
                                <span class="btn-close delete-order-btn" aria-label="Close" data-order-id="@order.Id"></span>
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<hr />
<div class="container">
    <div class="row">
        <!-- Khu vực nhập địa chỉ và số điện thoại (Chiếm 6 cột) -->
        <div class="col-md-6">
            <div id="customerInfo" class="mt-4 border p-3">
                <h4>Customer Information</h4>
                <button type="button" class="btn btn-info mt-2" id="isCustomerButton">Is Customer</button>

                <!-- Dòng chứa các thông tin địa chỉ và số điện thoại -->
                <div class="row">
                    <!-- Thành phố -->
                    <div class="col-md-6 mb-3">
                        <label for="city" class="form-label">City</label>
                        <select class="form-select" id="city" required>
                            <option value="">Select City</option>
                            <option value="Hanoi">Hanoi</option>
                            <option value="HoChiMinh">Ho Chi Minh</option>
                            <option value="DaNang">Da Nang</option>
                        </select>
                    </div>

                    <!-- Quận/Huyện -->
                    <div class="col-md-6 mb-3">
                        <label for="district" class="form-label">District</label>
                        <select class="form-select" id="district" required>
                            <option value="">Select District</option>
                            <option value="DongDa">Dong Da</option>
                            <option value="HaiBaTrung">Hai Ba Trung</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <!-- Phường/Xã -->
                    <div class="col-md-6 mb-3">
                        <label for="ward" class="form-label">Ward</label>
                        <select class="form-select" id="ward" required>
                            <option value="">Select Ward</option>
                            <option value="CuaNam">Cua Nam</option>
                            <option value="TrieuKhuc">Trieu Khuc</option>
                        </select>
                    </div>

                    <!-- Địa chỉ cụ thể -->
                    <div class="col-md-6 mb-3">
                        <label for="specificAddress" class="form-label">Specific Address</label>
                        <input type="text" class="form-control" id="specificAddress" placeholder="Enter your specific address" required />
                    </div>

                    <!-- Số điện thoại -->
                    <div class="col-md-6 mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phone" placeholder="Enter your phone number" required />
                    </div>

                    <!-- Ghi chú -->
                    <div class="col-md-6 mb-3">
                        <label for="note" class="form-label">Note</label>
                        <textarea class="form-control" id="note" rows="3" placeholder="Any additional note for the delivery?"></textarea>
                    </div>

                </div>


            </div>
        </div>

        <!-- Khu vực thông tin đơn hàng (Chiếm 6 cột) -->
        <div class="col-md-6">
            <div id="orderInfo" class="mt-4 border p-3">
                <h4>Order Information</h4>

                <!-- Dòng chứa các thông tin giao hàng và lựa chọn vận chuyển -->
                <div class="row">
                    <!-- Delivery Option -->
                    <div class="col-md-6 mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="deliveryOption" />
                            <label class="form-check-label" for="deliveryOption">Choose Delivery</label>
                        </div>
                    </div>
                    <!-- Hiển thị thông tin đơn hàng -->
                    <div class="col-md-6 mb-3">
                        <div id="orderDetailsText">Order summary will be shown here.</div>
                    </div>
                </div>

                <!-- Dòng chứa thông tin voucher -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <!-- Voucher Input -->
                        <label for="voucherCode" class="form-label">Voucher Code</label>
                        <input type="text" class="form-control" id="voucherCode" placeholder="Enter your voucher code" />
                        <button type="button" class="btn btn-primary mt-2" id="applyVoucherButton">Apply Voucher</button>
                    </div>

                    <!-- Hiển thị tổng tiền -->
                    <div class="col-md-6 mb-3">
                        <p><strong>Total Price:</strong> <span id="totalPrice">0</span></p>
                        <p><strong>Shipping Fee:</strong> <span id="shippingFee">10</span></p>
                        <p><strong>Discount (Voucher):</strong> <span id="discount">0</span></p>
                        <p><strong>Final Price:</strong> <span id="finalPrice">0</span></p>
                    </div>

                </div>
                <!-- Dòng chứa phương thức thanh toán và check out -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <!-- Phương thức thanh toán -->
                        <label for="paymentMethod" class="form-label">Payment Method</label>
                        <div class="payment-method-icons">
                            <img src="path/VNPay_Logo.png" alt="VNPay" class="payment-logo" />
                            <img src="path/MoMo_Logo.png" alt="MoMo" class="payment-logo" />
                            <img src="path/ZaloPay_Logo.png" alt="ZaloPay" class="payment-logo" />
                        </div>

                        <select class="form-select" id="paymentMethod" required>
                            <option value="">Select Payment Method</option>
                            <option value="CreditCard">Credit Card</option>
                            <option value="PayPal">PayPal</option>
                            <option value="CashOnDelivery">Cash on Delivery</option>
                        </select>
                    </div>

                    <!-- Nút Check Out -->
                    <div class="col-md-6 mb-3 d-flex align-items-end">
                        <button type="button" class="btn btn-success w-100" id="checkOutButton">Check Out</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



@section Styles {
    <style>
        .nav-link {
            position: relative; /* Định vị tương đối để chứa nút */
            padding-right: 2rem; /* Tạo khoảng trống cho nút */
            font-size: 16px;
            border-radius: 8px;
            display: flex;
            align-items: center;
        }

            .nav-link .btn-close {
                position: absolute;
                right: 0.5rem; /* Đặt gần mép phải */
                top: 50%;
                transform: translateY(-50%);
                background-color: transparent; /* Mặc định trong suốt */
                border: none;
                font-size: 14px; /* Kích thước chữ nhỏ */
                color: black; /* Màu chữ mặc định */
                cursor: pointer;
                padding: 0;
                transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
                width: 20px; /* Kích thước vùng bấm */
                height: 20px;
                text-align: center;
            }

                .nav-link .btn-close:hover {
                    background-color: #f44336; /* Màu đỏ khi hover */
                    color: white; /* Màu chữ khi hover */
                    border-radius: 4px; /* Bo góc nhẹ khi hover */
                }

    </style>

    <style>
        #customerInfo, #orderInfo {
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        /* Style cho các nút */
        #deliverOrderButton {
            background-color: #28a745;
            color: white;
        }

        #noDeliveryButton {
            background-color: #6c757d;
            color: white;
        }

        /* Đảm bảo các input không chiếm quá nhiều chiều rộng */
        .form-control {
            max-width: 100%;
        }

        .payment-method-icons {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin-top: 10px;
        }

        .payment-logo {
            width: 60px; /* Điều chỉnh kích thước logo */
            height: auto;
        }

    </style>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll("#orderTabs .nav-link");
    const orderHeader = document.querySelector("h3#orderHeader");

    tabs.forEach(tab => {
        tab.addEventListener("click", function () {
            const orderId = this.getAttribute("data-order-id");
            const deleteButton = this.parentElement.querySelector(".delete-order-btn");

            // Hiển thị nút xóa của tab được chọn, ẩn nút xóa của các tab khác
            document.querySelectorAll(".delete-order-btn").forEach(btn => (btn.style.display = "none"));
            if (deleteButton) deleteButton.style.display = "inline-block";

            // Cập nhật tiêu đề Order
            if (orderHeader) {
                orderHeader.textContent = `Order: ${orderId}`;
            }

            // Gọi API để lấy chi tiết đơn hàng
            loadOrderDetails(orderId);
        });
    });

    // Xóa Order khi click nút Delete
    document.querySelectorAll(".delete-order-btn").forEach(button => {
        button.addEventListener("click", function () {
            const orderId = this.getAttribute("data-order-id");
            deleteOrder(orderId);
        });
    });

    // Auto-load first tab
    const firstTab = tabs[0];
    if (firstTab) {
        firstTab.click();
    }

    // Gọi API tạo đơn hàng
    document.querySelector("#createOrderButton").addEventListener("click", function () {
        createOrderByStaff();
    });
});

// Hàm xóa Order
function deleteOrder(orderId) {
    if (!confirm("Are you sure you want to delete this order?")) return;

    fetch(`https://localhost:7280/api/Orders/DeleteOrderById?id=${orderId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Failed to delete the order");
        }
        alert("Order deleted successfully!");
        location.reload(); // Reload lại trang sau khi xóa
    })
    .catch(error => {
        console.error("Error deleting order:", error);
        alert("Failed to delete the order. Please try again.");
    });
}

// Hàm tải chi tiết đơn hàng
function loadOrderDetails(orderId) {
    const url = `https://localhost:7280/api/OrderDetails/GetOrderDetailByOrderId?orderId=${orderId}`;
    fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        return response.json();
    })
    .then(data => {
        const contentDiv = document.getElementById("orderDetailsContent");
        contentDiv.innerHTML = "";

        if (data.length > 0) {
            const table = `
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Size</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>TotalPrice</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${data.map(item => `
                            <tr>
                                <td>
                                    <img src="${item.product?.images?.[0]?.url ?? '/path/404.png'}"
                                         alt="${item.product?.name ?? 'No Name'}"
                                         class="img-thumbnail" style="width: 120px; height: auto;" />
                                </td>
                                <td>${item.product?.name ?? 'Unknown Product'}</td>
                                <td>${item.product?.categoryId ?? 'N/A'}</td>
                                <td>${item.product?.brandId ?? 'N/A'}</td>
                                <td>${item.product?.sizeId ?? 'N/A'}</td>
                                <td>${item.product.price ?? 'N/A'}</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-outline-secondary decrease-quantity mx-1" data-id="${item.id}" type="button">-</button>
                                        <input type="number" class="form-control quantity-input text-center" data-id="${item.id}" value="${item.quatity ?? 1}" min="1" style="width: 60px;" />
                                        <button class="btn btn-outline-secondary increase-quantity mx-1" data-id="${item.id}" type="button">+</button>
                                    </div>
                                </td>
                                <td>${item.totalPrice ?? 'N/A'}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm remove-product" data-id="${item.id}">Remove</button>
                                </td>
                            </tr>`).join('')}
                    </tbody>
                </table>
            `;
            contentDiv.innerHTML = table;
            bindCartEvents();
        } else {
            contentDiv.innerHTML = "<p>No products found for this order.</p>";
        }
    })
    .catch(error => {
        console.error("Error fetching order details:", error);
        const contentDiv = document.getElementById("orderDetailsContent");
        contentDiv.innerHTML = "<p>Error loading order details. Please try again later.</p>";
    });
}

// Hàm bind lại các sự kiện cho giỏ hàng
function bindCartEvents() {
    document.querySelectorAll(".decrease-quantity").forEach(button => {
        button.addEventListener("click", function () {
            const id = this.getAttribute("data-id");
            console.log(`Decrease quantity for item: ${id}`);
            // Logic giảm số lượng
            updateQuantity(id, 'decrease');
        });
    });

    document.querySelectorAll(".increase-quantity").forEach(button => {
        button.addEventListener("click", function () {
            const id = this.getAttribute("data-id");
            console.log(`Increase quantity for item: ${id}`);
            // Logic tăng số lượng
            updateQuantity(id, 'increase');
        });
    });

    document.querySelectorAll(".remove-product").forEach(button => {
        button.addEventListener("click", function () {
            const id = this.getAttribute("data-id");
            console.log(`Remove product: ${id}`);
            // Logic xóa sản phẩm
            removeProduct(id);
        });
    });
}

// Hàm cập nhật số lượng sản phẩm
function updateQuantity(itemId, action) {
    const quantityInput = document.querySelector(`.quantity-input[data-id='${itemId}']`);
    let quantity = parseInt(quantityInput.value);

    if (action === 'increase') {
        quantity++;
    } else if (action === 'decrease' && quantity > 1) {
        quantity--;
    }

    quantityInput.value = quantity;

    // Có thể gọi API để cập nhật số lượng
    console.log(`Updated quantity for item ${itemId}: ${quantity}`);
}

// Hàm xóa sản phẩm khỏi giỏ hàng
function removeProduct(itemId) {
    console.log(`Product ${itemId} removed`);

    // Gọi API để xóa sản phẩm
    fetch(`https://localhost:7280/api/OrderDetails/RemoveProductFromOrder?itemId=${itemId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Failed to remove the product");
        }
        alert("Product removed successfully!");
        location.reload(); // Reload lại trang sau khi xóa
    })
    .catch(error => {
        console.error("Error removing product:", error);
        alert("Failed to remove the product. Please try again.");
    });
}

// Hàm tạo đơn hàng mới bởi nhân viên
function createOrderByStaff() {
    const orderData = {
        customerId: document.querySelector("#customerId").value,
        orderItems: [...document.querySelectorAll(".order-item")].map(item => ({
            productId: item.getAttribute("data-product-id"),
            quantity: item.querySelector(".quantity-input").value
        })),
        totalPrice: document.querySelector("#totalPrice").value,
        status: "Pending", // Trạng thái đơn hàng
    };

    fetch('https://localhost:7280/api/Orders/create-by-staff', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Failed to create the order");
        }
        return response.json();
    })
    .then(data => {
        alert("Order created successfully!");
        location.reload(); // Reload lại trang sau khi tạo đơn hàng
    })
    .catch(error => {
        console.error("Error creating order:", error);
        alert("Failed to create the order. Please try again.");
    });
}



    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Lấy phần tử nút giao hàng và không giao hàng
            const deliverButton = document.getElementById("deliverOrderButton");
            const noDeliverButton = document.getElementById("noDeliveryButton");

            // Lắng nghe sự kiện click trên nút giao hàng
            deliverButton.addEventListener("click", function () {
                const address = document.getElementById("address").value;
                const phone = document.getElementById("phone").value;

                if (!address || !phone) {
                    alert("Please enter both address and phone number.");
                    return;
                }

                // Cập nhật thông tin giao hàng
                updateDeliveryStatus(true, address, phone);
            });

            // Lắng nghe sự kiện click trên nút không giao hàng
            noDeliverButton.addEventListener("click", function () {
                // Cập nhật trạng thái không giao hàng
                updateDeliveryStatus(false);
            });

            // Hàm cập nhật trạng thái giao hàng
            function updateDeliveryStatus(isDelivering, address = "", phone = "") {
                const orderSummary = document.getElementById("orderDetailsText");

                if (isDelivering) {
                    orderSummary.innerHTML = `
                        <strong>Delivery Information:</strong><br />
                        Address: ${address}<br />
                        Phone: ${phone}<br />
                        <span class="text-success">Delivery is selected.</span>
                    `;
                } else {
                    orderSummary.innerHTML = `
                        <strong>No Delivery Selected</strong><br />
                        <span class="text-danger">No delivery option has been selected.</span>
                    `;
                }
            }
        });

    </script>


}


