@using View.Utilities.Extensions
@model View.ViewModels.CounterSalesViewModel

@{
    Layout = "_LayoutAdmin";
}

@{
    int stt = 1;
}
<div class="container-fluid">
    <div class="card shadow-sm rounded">
        <div class="card-body">
            <div id="orderForm" class="d-inline-block">
                <!-- Lưu staffId vào input ẩn để sử dụng trong script -->
                <input type="hidden" id="staffId" value="@Model.StaffId" />
                <button id="createOrderBtn" class="btn btn-md btn-success">Create New Order</button>
            </div>
            <hr />
            <div>
            <div class="row mb-8 align-items-center">
                <div class="col-md-8 text-start">
                     @if (Model.OrderId != null)
                    {
                        <h3 class="text-muted">
                            Order Information: 
                        </h3>
                        <h5 class="text-muted">Order Id : <span id="orderHeader"> @Model.OrderId</span>  </h5>
                        <h5 class="text-muted">Staff : <span>@Model.CreateBy</span> </h5>
                    }
                    else{
                        <h3 id="orderHeader" class="text-muted">
                            #N/A
                        </h3>
                    }
                </div>

                <div class="col-md-4 text-end">
                    <!-- Kiểm tra nếu orderId tồn tại thì hiển thị nút Add Product -->
                    @if (Model.OrderId != null)
                    {
                        <div id="addProductSection" class="d-inline-block">
                            <button id="addProductBtn" class="btn btn-md btn-primary">Add Product For This Order</button>
                        </div>
                    }
                    else
                    {
                        <!-- Nút để hiển thị Modal -->
                        <div id="addProductSection" class="d-inline-block">
                            <button id="addProductBtn"
                                class="btn btn-md btn-primary" hidden> Add Product For This Order </button>
                        </div>
                    }
                </div>
            </div>
            </div>
            <hr />
            <div class="container">
    <div class="row">
        <div class="col-12">
            @if (Model == null || (Model.orders == null || !Model.orders.Any()))
            {
                <!-- Nếu không có đơn hàng, hiển thị trang trống hoặc thông báo -->
                <div class="empty-page">
                    <h4 class="text-center text-muted">No orders found.</h4>
                    <p class="text-center">Your order history is empty.</p>
                </div>
            }
            else
            {
                <!-- Hiển thị danh sách đơn hàng nếu có -->
                <ul class="nav nav-pills" id="orderTabs" role="tablist">
                    @foreach (var order in Model.orders)
                    {
                        
                        <li class="nav-item" role="presentation">
                            <button class="nav-link d-flex justify-content-between align-items-center"
                                    id="tab-@order.Id"
                                    data-bs-toggle="pill"
                                    data-order-id="@order.Id"
                                    type="button"
                                    role="tab">
                                <span>Order - @stt</span>
                                <span class="btn-close delete-order-btn" aria-label="Close" data-order-id="@order.Id"></span>
                            </button>
                        </li>
                        stt++;
                    }
                </ul>
            }
        </div>
    </div>

    <hr />

     <div class="row mt-4">
        <div class="col-12">
            <div class="tab-content" id="orderTabsContent">
                <div id="orderDetailsContent" class="tab-pane fade show active">
                    <h3 class="text-center text-muted">Select an order to view details.</h3>
                </div>
                <div id="totalPriceContent" class="mt-3 text-end fw-bold fs-5">
                    <div class="order-summary mt-4">
                    <h4>Total Order Price: <span id="orderTotal">0.00</span></h4>
                </div>                
            </div>
            </div>
        </div>
    </div>

</div>
            <hr />
            <div class="container">
    <div class="row">
        <!-- Khu vực nhập địa chỉ và số điện thoại (Chiếm 6 cột) -->
        <div class="col-md-6">
            <div id="customerInfo" class="mt-4 border p-3">
                <h4>Customer Information</h4>
                <button type="button" class="btn btn-info mt-2" id="isCustomerButton">Is Customer</button>

                <!-- Dòng chứa các thông tin địa chỉ và số điện thoại -->
                <div class="row">
                    <!-- Thành phố -->
                    <div class="col-md-6 mb-3">
                        <label for="city" class="form-label">City</label>
                        <select class="form-select" id="city" required>
                            <option value="">Select City</option>
                            <option value="Hanoi">Hanoi</option>
                            <option value="HoChiMinh">Ho Chi Minh</option>
                            <option value="DaNang">Da Nang</option>
                        </select>
                    </div>

                    <!-- Quận/Huyện -->
                    <div class="col-md-6 mb-3">
                        <label for="district" class="form-label">District</label>
                        <select class="form-select" id="district" required>
                            <option value="">Select District</option>
                            <option value="DongDa">Dong Da</option>
                            <option value="HaiBaTrung">Hai Ba Trung</option>
                        </select>
                    </div>
                </div>

                <div class="row">
                    <!-- Phường/Xã -->
                    <div class="col-md-6 mb-3">
                        <label for="ward" class="form-label">Ward</label>
                        <select class="form-select" id="ward" required>
                            <option value="">Select Ward</option>
                            <option value="CuaNam">Cua Nam</option>
                            <option value="TrieuKhuc">Trieu Khuc</option>
                        </select>
                    </div>

                    <!-- Địa chỉ cụ thể -->
                    <div class="col-md-6 mb-3">
                        <label for="specificAddress" class="form-label">Specific Address</label>
                        <input type="text" class="form-control" id="specificAddress" placeholder="Enter your specific address" required />
                    </div>

                    <!-- Số điện thoại -->
                    <div class="col-md-6 mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phone" placeholder="Enter your phone number" required />
                    </div>

                    <!-- Ghi chú -->
                    <div class="col-md-6 mb-3">
                        <label for="note" class="form-label">Note</label>
                        <textarea class="form-control" id="note" rows="3" placeholder="Any additional note for the delivery?"></textarea>
                    </div>

                </div>


            </div>
        </div>

        <!-- Khu vực thông tin đơn hàng (Chiếm 6 cột) -->
                    <div class="col-md-6">
                        <div id="orderInfo" class="mt-4 border p-3">
                            <h4>Order Information</h4>

                            <!-- Dòng chứa các thông tin giao hàng và lựa chọn vận chuyển -->
                            <div class="row">
                                <!-- Delivery Option -->
                                <div class="col-md-6 mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="deliveryOption" />
                                        <label class="form-check-label" for="deliveryOption">Choose Delivery</label>
                                    </div>
                                </div>
                                <!-- Hiển thị thông tin đơn hàng -->
                                <div class="col-md-6 mb-3">
                                    <div id="orderDetailsText">Order summary will be shown here.</div>
                                </div>
                            </div>

                            <!-- Dòng chứa thông tin voucher -->
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <!-- Voucher Input -->
                                    <label for="voucherCode" class="form-label">Voucher Code</label>
                                    <input type="text" class="form-control" id="voucherCode" placeholder="Enter your voucher code" />
                                    <button type="button" class="btn btn-primary mt-2" id="applyVoucherButton">Apply Voucher</button>
                                </div>

                                <!-- Hiển thị tổng tiền -->
                                <div class="col-md-6 mb-3">
                                    <p><strong>Total Price:</strong> <span id="totalPrice"></span></p>
                                    <p><strong>Shipping Fee:</strong> <span id="shippingFee"></span></p>
                                    <p><strong>Discount (Voucher):</strong> <span id="discount"></span></p>
                                    <p><strong>Final Price:</strong> <span id="finalPrice"></span></p>
                                </div>
                            </div>

                            <!-- Dòng chứa phương thức thanh toán và check out -->
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <!-- Phương thức thanh toán -->
                                    <label for="paymentMethod" class="form-label">Payment Method</label>
                                    <div class="payment-method-icons row g-1">
                                        <!-- Sử dụng g-1 để giảm khoảng cách giữa các cột -->
                                        <!-- Thêm class g-1 để có khoảng cách nhỏ giữa các cột -->
                                        <div class="col-md-3">
                                            <label class="payment-icon-container d-block text-center">
                                                <input type="radio" name="paymentMethod" value="2" class="payment-icon" />
                                                <img src="/path/Icon VNPAY-QR.png" style="width: auto; height: 30px" alt="VNPay" class="payment-logo" />
                                            </label>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="payment-icon-container d-block text-center">
                                                <input type="radio" name="paymentMethod" value="1" class="payment-icon" />
                                                <img src="/path/MoMo_Logo.png" style="width: auto; height: 30px" alt="MoMo" class="payment-logo" />
                                            </label>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="payment-icon-container d-block text-center">
                                                <input type="radio" name="paymentMethod" value="3" class="payment-icon" />
                                                <img src="/path/ZaloPay_Logo.jpg" style="width: auto; height: 30px" alt="ZaloPay" class="payment-logo" />
                                            </label>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="payment-icon-container d-block text-center">
                                                <input type="radio" name="paymentMethod" value="0" class="payment-icon" />
                                                <img src="/path/Cash_Logo.png" style="width: auto; height: 30px" alt="Cash" class="payment-logo" />
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Nút Check Out -->
                                <div class="col-md-6 mb-3">                                  
                                    <div class="mb-3">
                                        <input id="amountGivenInput" class="form-control" placeholder="Enter amount given" />
                                    </div>
                                    <div>
                                        <button type="button" class="btn btn-success w-100" id="checkOutButton">Check Out</button>
                                    </div>
                                </div>
                            </div>



                        </div>
                    </div>



    </div>
</div>
        </div>
    </div>
</div>



<!-- Modal thêm sản phẩm -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg"> <!-- Thay đổi kích thước modal thành modal-lg -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Add Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Thanh tìm kiếm sản phẩm -->
                <div class="mb-3">
                    <input type="text" class="form-control" id="searchProduct" placeholder="Search for products..." onkeyup="filterProducts()" />
                </div>

                <!-- Bảng hiển thị thông tin sản phẩm -->
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Image</th>
                            <th>Price</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Các dòng dữ liệu sản phẩm sẽ được thêm vào ở đây -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button"
                    class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <style>
        .nav-link {
            position: relative; /* Định vị tương đối để chứa nút */
            padding-right: 2rem; /* Tạo khoảng trống cho nút */
            font-size: 16px;
            border-radius: 8px;
            display: flex;
            align-items: center;
        }

            .nav-link .btn-close {
                position: absolute;
                right: 0.5rem; /* Đặt gần mép phải */
                top: 50%;
                transform: translateY(-50%);
                background-color: transparent; /* Mặc định trong suốt */
                border: none;
                font-size: 14px; /* Kích thước chữ nhỏ */
                color: black; /* Màu chữ mặc định */
                cursor: pointer;
                padding: 0;
                transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
                width: 20px; /* Kích thước vùng bấm */
                height: 20px;
                text-align: center;
            }

                .nav-link .btn-close:hover {
                    background-color: #f44336; /* Màu đỏ khi hover */
                    color: white; /* Màu chữ khi hover */
                    border-radius: 4px; /* Bo góc nhẹ khi hover */
                }

    </style>

    <style>
        #customerInfo, #orderInfo {
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        /* Style cho các nút */
        #deliverOrderButton {
            background-color: #28a745;
            color: white;
        }

        #noDeliveryButton {
            background-color: #6c757d;
            color: white;
        }

        /* Đảm bảo các input không chiếm quá nhiều chiều rộng */
        .form-control {
            max-width: 100%;
        }

        .payment-method-icons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .payment-logo {
            width: 60px; /* Điều chỉnh kích thước logo */
            height: auto;
        }

    </style>
    <style>
        .payment-method-icons {
            display: flex;
            justify-content: space-between;
        }

        .payment-icon-container {
            position: relative;
            cursor: pointer;
            display: inline-block;
        }

            .payment-icon-container input {
                position: absolute;
                opacity: 0; /* Ẩn radio button, chỉ sử dụng ảnh */
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                cursor: pointer;
            }

                .payment-icon-container input:checked + img {
                    border: 2px solid #007bff; /* Màu outline khi chọn */
                    border-radius: 5px; /* Đường viền bo góc */
                }

        .payment-logo {
            width: auto;
            height: 50px;
            transition: all 0.3s ease;
        }

        .payment-icon-container input:hover + img {
            opacity: 0.8; /* Hiệu ứng hover cho ảnh */
        }
    
    </style>
}

@section Scripts {
<!---------------------------------------->

    <!--  Phần script để tạo ra tab-order -->
<script>
        document.addEventListener("DOMContentLoaded", () => {
    // Hàm tạo đơn hàng mới bởi nhân viên
    function createOrderByStaff() {
        // Lấy staffId từ input ẩn
        const staffId = document.getElementById("staffId").value;

        if (!staffId) {
            alert("Staff ID is missing. Please log in again.");
            return;
        }

        const customerId = document.querySelector("#customerId")?.value || null;
        const voucherId = document.querySelector("#voucherId")?.value || null;

        const orderData = {
            orderItems: [...document.querySelectorAll(".order-item")].map(item => ({
                productId: item.getAttribute("data-product-id"),
                quantity: item.querySelector(".quantity-input").value
            })),
            totalPrice: document.querySelector("#totalPrice").value,
            status: 0 // Trạng thái đơn hàng
        };

        // Xây dựng URL với query parameters
        let url = `https://localhost:7280/api/Orders/create-by-staff?staffId=${staffId}`;
        if (customerId) url += `&customerId=${customerId}`;
        if (voucherId) url += `&voucherId=${voucherId}`;

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(orderData),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to create the order");
                }
                return response.json();
            })
            .then(data => {
                location.reload(); 
            })
            .catch(error => {
                console.error("Error creating order:", error);
                alert("Failed to create the order. Please try again.");
            });
    }

    // Gắn sự kiện vào nút Create Order
    const createOrderBtn = document.getElementById("createOrderBtn");
    if (createOrderBtn) {
        createOrderBtn.addEventListener("click", createOrderByStaff);
    }
});

    </script>
    <!-- Phần script để tạo ra Hiển thị ra order và xóa order -->
<script>

    document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll("#orderTabs .nav-link");
    const orderHeader = document.querySelector("h3#orderHeader");

    let hasReloaded = false;

    

    tabs.forEach(tab => {
        tab.addEventListener("click", function () {
            const orderId = this.getAttribute("data-order-id");

            const deleteButton = this.parentElement.querySelector(".delete-order-btn");

            // Hiển thị nút xóa của tab được chọn, ẩn nút xóa của các tab khác
            document.querySelectorAll(".delete-order-btn").forEach(btn => (btn.style.display = "none"));
            if (deleteButton) deleteButton.style.display = "inline-block";

            // Cập nhật tiêu đề Order
            if (orderHeader) {
                orderHeader.textContent = `Order: ${orderId}`;
            }

            // Gọi API để lấy chi tiết đơn hàng
            loadOrderDetails(orderId);
        });
    });

// Gắn sự kiện cho nút xóa
    document.querySelectorAll(".delete-order-btn").forEach(button => {
        button.addEventListener("click", function (event) {
            event.stopPropagation(); // Ngăn không cho sự kiện click tab được kích hoạt
            const orderId = this.getAttribute("data-order-id");
            deleteOrder(orderId);
        });
    });

    // Auto-load first tab  
    const firstTab = tabs[0];
    if (firstTab) {
        firstTab.click();
    }

    
});

// Hàm xóa Order
function deleteOrder(orderId) {
    if (!confirm("Are you sure you want to delete this order?")) return;

    fetch(`https://localhost:7280/api/Orders/DeleteOrderById?id=${orderId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("Failed to delete the order");
        }
        location.reload(); // Reload lại trang sau khi xóa
    })
    .catch(error => {
        console.error("Error deleting order:", error);
        alert("Failed to delete the order. Please try again.");
    });
}

function loadOrderDetails(orderId) {
    const url = `https://localhost:7280/api/OrderDetails/GetOrderDetailByOrderId?orderId=${orderId}`;

    fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => {
        if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);
        return response.json();
    })
    .then(data => {
        const contentDiv = document.getElementById("orderDetailsContent");
        contentDiv.innerHTML = ""; // Clear previous content

        if (data && data.length > 0) {
            const rows = data.map((item, index) => {
                const product = item.product;
                const sizes = product?.productSizes?.find(ps => ps.size?.id === item.sizeId);
                const price = product?.price ?? 0;
                const totalPrice = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(item.totalPrice ?? (item.quantity * price));

                return `
                <tr data-id="${item.id}-${sizes?.size?.id}">
                    <td>${index + 1}</td>
                    <td><img src="${product?.images?.[0]?.url ?? '/path/404.png'}" alt="${product?.name ?? 'No Name'}" class="img-thumbnail" style="width: 120px;" /></td>
                    <td>${product?.name ?? 'Unknown Product'}</td>
                    <td>${product?.category?.name ?? 'N/A'}</td>
                    <td>${product?.brand?.name ?? 'N/A'}</td>
                    <td>${sizes?.size?.value ?? 'N/A'}</td>
                    <td data-price="${price}">${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price)}</td>
                    <td>
                        <div class="d-flex align-items-center">
                            <button class="btn btn-outline-secondary decrease-quantity mx-1" data-size-id="${sizes?.size?.id}" data-id="${item.productId}" data-price="${price}" type="button">-</button>
                            <input type="number" class="form-control quantity-input text-center" data-size-id="${sizes?.size?.id}" data-id="${item.productId}" value="${item.quantity}" min="1" style="width: 60px;" />
                            <button class="btn btn-outline-secondary increase-quantity mx-1" data-size-id="${sizes?.size?.id}" data-id="${item.productId}" data-price="${price}" type="button">+</button>
                        </div>
                    </td>
                    <td class="total-price" data-id="${item.productId}">${totalPrice}</td>
                    <td><button class="btn btn-danger btn-sm remove-product" data-id="${item.productId}" data-size-id="${sizes?.size?.id}">Remove</button></td>
                </tr>
                `;
            });

            const table = `
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Category</th>
                        <th>Brand</th>
                        <th>Size</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>${rows.join('')}</tbody>
            </table>
            `;
            contentDiv.innerHTML = table;

            bindCartEvents(orderId, data); // Gắn sự kiện cho các nút tăng giảm
        } else {
            contentDiv.innerHTML = `
            <table class="table table-bordered table-striped">
                <thead>
                    <tr><th>#</th><th>Image</th><th>Product Name</th><th>Category</th><th>Brand</th><th>Size</th><th>Price</th><th>Quantity</th><th>Total Price</th><th>Actions</th></tr>
                </thead>
                <tbody><tr><td colspan="10" class="text-center"><img src="/path/no-product-found.png" alt="No Products Found" style="width: auto; height: 350px;" /></td></tr></tbody>
            </table>
            `;
        }
    })
    .catch(error => {
        console.error("Error fetching order details:", error);
        document.getElementById("orderDetailsContent").innerHTML = "<p>Error loading order details. Please try again later.</p>";
    });
}

// Gắn sự kiện cho các nút tăng giảm số lượng
function bindCartEvents(orderId, data) {
    document.querySelectorAll('.increase-quantity').forEach(button => {
        button.addEventListener('click', (e) => {
            const sizeId = e.target.getAttribute('data-size-id');
            const productId = e.target.getAttribute('data-id');
            const quantityInput = e.target.closest('tr').querySelector('.quantity-input');
            const price = data.find(item => item.productId === productId)?.product?.price ?? 0;
            let quantity = parseInt(quantityInput.value);
            quantity += 1;
            quantityInput.value = quantity;
            updateOrderDetail(orderId, productId, sizeId, quantity);
            updateTotalPriceInTable(productId, quantity, price);
            updateOrderTotal();
        });
    });

 document.querySelectorAll('.decrease-quantity').forEach(button => {
    button.addEventListener('click', (e) => {
        const sizeId = e.target.getAttribute('data-size-id');
        const productId = e.target.getAttribute('data-id');
        const quantityInput = e.target.closest('tr').querySelector('.quantity-input');
        const price = data.find(item => item.productId === productId)?.product?.price ?? 0;

        // Kiểm tra giá trị hợp lệ của quantity
        let quantity = parseInt(quantityInput.value);
        if (isNaN(quantity) || quantity <= 1) {
            // Hiển thị thông báo nếu số lượng không hợp lệ hoặc <= 1
            toastr.error("Số lượng sản phẩm phải lớn hơn 0.");
            return; // Dừng việc giảm số lượng nếu không hợp lệ
        }

        quantity -= 1;
        quantityInput.value = quantity;

        // Cập nhật lại các thông tin đơn hàng và tổng tiền
        updateOrderDetail(orderId, productId, sizeId, quantity);
        updateTotalPriceInTable(productId, quantity, price);
        updateOrderTotal();
    });
});


    document.querySelectorAll('.remove-product').forEach(button => {
        button.addEventListener('click', (e) => {
            const sizeId = e.target.getAttribute('data-size-id');
            const productId = e.target.getAttribute('data-id');
            removeProductFromOrder(orderId, productId, sizeId);
        });
    });
}

function updateOrderDetail(orderId, productId, sizeId, quantity) {
    const url = `https://localhost:7280/api/OrderDetails/UpdateOrderDetail?orderId=${orderId}&productId=${productId}&sizeId=${sizeId}&quantity=${quantity}`;

    return fetch(url, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error(`Error updating order detail: ${response.statusText}`);
        }
    })
    .then(data => {
        toastr.success("Order detail updated successfully!", "Success");
        console.log("Order detail updated successfully:", data);
        return data;
    })
    .catch(error => {
        toastr.error("Failed to update order detail. Please try again.", "Error");
        console.error("Error updating order detail:", error);
    });
}

function updateTotalPriceInTable(productId, quantity, price) {
    const totalPriceElement = document.querySelector(`td[data-id="${productId}"]`);
    if (totalPriceElement) {
        // Tính tổng giá cho sản phẩm
        const newTotalPrice = quantity * price;
        
        // Định dạng số với dấu phẩy phân cách hàng nghìn (không có ký hiệu tiền tệ)
        totalPriceElement.textContent = newTotalPrice.toLocaleString('vi-VN');
    }
}

function updateOrderTotal() {
    const totalElements = document.querySelectorAll('.total-price');
    let totalOrderPrice = 0;

    totalElements.forEach(element => {
        // Lấy text từ phần tử, loại bỏ dấu chấm và các ký tự không cần thiết
        const priceText = element.textContent.trim().replace(/\./g, '').replace('VND', '').trim();

        // Chuyển giá trị text thành số thực
        const price = parseFloat(priceText);

        // Kiểm tra nếu giá trị là một số hợp lệ
        if (!isNaN(price)) {
            totalOrderPrice += price;
        }
    });

    const orderTotalElement = document.getElementById("orderTotal");
    if (orderTotalElement) {
        // Định dạng tổng tiền với dấu chấm phân cách hàng nghìn sau khi cộng tổng
        const formattedPrice = totalOrderPrice.toLocaleString('vi-VN');
        orderTotalElement.textContent = formattedPrice + ' VND';
    }
}

function updateOrderTotal() {
    const totalElements = document.querySelectorAll('.total-price');
    let totalOrderPrice = 0;

    totalElements.forEach(element => {
        // Lấy text từ phần tử, loại bỏ dấu chấm và các ký tự không cần thiết
        const priceText = element.textContent.trim().replace(/\./g, '').replace('VND', '').trim();

        // Chuyển giá trị text thành số thực
        const price = parseFloat(priceText);

        // Kiểm tra nếu giá trị là một số hợp lệ
        if (!isNaN(price)) {
            totalOrderPrice += price;
        }
    });

    const orderTotalElement = document.getElementById("orderTotal");
    if (orderTotalElement) {
        // Định dạng tổng tiền với dấu chấm phân cách hàng nghìn sau khi cộng tổng
        const formattedPrice = totalOrderPrice.toLocaleString('vi-VN');
        orderTotalElement.textContent = formattedPrice + ' VND';
    }
}


function removeProductFromOrder(orderId, productId, sizeId) {
    const url = `https://localhost:7280/api/OrderDetails/RemoveOrderDetail?orderId=${orderId}&productId=${productId}&sizeId=${sizeId}`;

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Error removing product: ${response.statusText}`);
        }
        return response.json();
    })
    .then(() => {
        toastr.success('Product removed successfully!');
        updateOrderTotal();
        setTimeout(function () {
                window.location.reload(); // Reload trang
            }, 2000);
        // Cập nhật tổng tiền sau khi xóa sản phẩm
    })
    .catch(error => {
        console.error("Error removing product:", error);
        toastr.error('Failed to remove product. Please try again.');
    });
}

    </script>
<script>
        document.getElementById("addProductBtn").addEventListener("click", async function () {
            const productModal = new bootstrap.Modal(document.getElementById('productModal'));
            productModal.show();

            // Lấy danh sách sản phẩm và hiển thị trong bảng
            try {
                const response = await fetch('https://localhost:7280/api/Products');
                const products = await response.json();

                const tableBody = document.getElementById("productTableBody");
                tableBody.innerHTML = ""; // Clear the table before adding new data

                // Duyệt qua danh sách sản phẩm và thêm vào bảng
                for (const product of products) {
                    const row = document.createElement("tr");
                    console.log(product);  // Kiểm tra sản phẩm

                    if (product.productSizes && Array.isArray(product.productSizes)) {
                        // Duyệt qua từng sizeId và lấy tên từ API Size
                        const sizeSelect = await getSizeOptions(product.productSizes);

                        row.innerHTML = `
                            <td>${product.name}</td>
                            <td><img src="${product.images?.[0]?.url || '/path/404.png'}" class="img-thumbnail" style="width: 100px; height: auto;"></td>
                            <td>${product.price}</td>
                            <td>${product.category.name}</td>
                            <td>${product.brand.name}</td>
                            <td>${sizeSelect}</td>
                            <td>
                                <input type="number" class="form-control quantity-input" id="quantity-${product.id}" value="1" min="1" style="width: 60px;">
                            </td>
                            <td>
                                <button class="btn btn-success" id="addProductBtn-${product.id}">+</button>
                            </td>
                        `;
                    } else {
                        console.log("No product sizes found or it's not an array");
                    }

                    tableBody.appendChild(row);

                    // Lắng nghe sự kiện click vào nút thêm sản phẩm
                    document.getElementById(`addProductBtn-${product.id}`).addEventListener("click", async function () {
                        const selectedSizeId = document.getElementById(`size-select-${product.id}`).value;
                        const selectedQuantity = document.getElementById(`quantity-${product.id}`).value;
                        await addOrUpdateOrderDetail(product.id, selectedSizeId, selectedQuantity);
                    });
                }
            } catch (error) {
                console.error("Error fetching products:", error);
                alert("Error loading products. Please try again later.");
            }
        });

        // Hàm để lấy các tùy chọn kích thước từ API Size
        async function getSizeOptions(productSizes) {
            let optionsHtml = '';

            for (const size of productSizes) {
                try {
                    const sizeResponse = await fetch(`https://localhost:7280/api/Sizes/${size.sizeId}`);
                    const sizeData = await sizeResponse.json();
                    console.log("Size data:", sizeData);  // Kiểm tra dữ liệu size

                    optionsHtml += `<option value="${size.sizeId}">${sizeData.value || 'Unknown Size'}</option>`;
                } catch (error) {
                    console.error("Error fetching size data:", error);
                }
            }

            return `<select class="form-control size-select" id="size-select-${productSizes[0].productId}">${optionsHtml}</select>`;
        }

        async function addOrUpdateOrderDetail(productId, sizeId, quantity) {
            const orderElement = document.querySelector('.nav-link.active');
            if (!orderElement) {
                toastr.error("Order ID not found.");
                return;
            }

            const orderId = orderElement.getAttribute('data-order-id');
            const quantityElement = document.getElementById(`quantity-${productId}`);

            if (!quantityElement) {
                toastr.error("Quantity input not found.");
                return;
            }

            const quantityValue = parseInt(quantityElement.value);

            if (isNaN(quantityValue) || quantityValue <= 0) {
                toastr.error("Quantity must be a valid number greater than zero.");
                return;
            }

            if (!sizeId || !productId) {
                toastr.error("Invalid Product or Size ID.");
                return;
            }

            const url = `https://localhost:7280/api/OrderDetails/AddOrUpdateOrderDetail?orderId=${orderId}&productId=${productId}&sizeId=${sizeId}&quantity=${quantityValue}`;

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json(); // Lấy dữ liệu lỗi từ response
                    const errorMessage = errorData.title || 'An error occurred'; // Lấy title hoặc thông báo mặc định
                    const errorDetail = errorData.detail || 'No additional details provided'; // Lấy detail hoặc thông báo mặc định
                    toastr.error(`Error: ${errorMessage}\nDetails: ${errorDetail}`); // Hiển thị thông báo lỗi
                    return;
                }

                const data = await response.json();
                toastr.success("Order detail updated successfully!");
                location.reload();
            } catch (error) {
                console.error('Error:', error);
                toastr.error("An unexpected error occurred. Please try again later.");
            }
        }

</script>
<script>
document.getElementById('checkOutButton').addEventListener('click', function () {
    // Lấy dữ liệu từ giao diện
    var orderId = "@Model.OrderId";
    var staffId = "@Model.StaffId";
    
    // Lấy giá trị tổng tiền từ phần tử hiển thị tổng tiền của đơn hàng
    var totalAmountText = document.getElementById('orderTotal').textContent || "0";
    
    // Loại bỏ dấu phân cách nghìn và chuyển thành số nguyên (Int)
    var totalAmount = parseInt(totalAmountText.replace(/[^\d]/g, ''), 10);

    if (isNaN(totalAmount) || totalAmount <= 0) {
        toastr.error("Tổng tiền không hợp lệ.");
        return;
    }

    // Lấy giá trị amountGiven từ input và xử lý hiển thị
    var amountGivenText = document.getElementById('amountGivenInput').value || "0";
    
    // Loại bỏ dấu phân cách nghìn và chuyển thành số nguyên
    var amountGiven = parseInt(amountGivenText.replace(/[^\d]/g, ''), 10);

    if (isNaN(amountGiven) || amountGiven <= 0) {
        toastr.error("Please enter a valid amount.");
        return;
    }

    // Lấy giá trị paymentMethod từ radio button được chọn
    var paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    if (paymentMethod === undefined) {
        toastr.error("Please select a payment method.");
        return;
    }
    console.log(amountGiven, totalAmount);

    // Tạo URL với query string
    var url = `https://localhost:7280/api/Orders/CheckOutInStore?orderId=${orderId}&staffId=${staffId}&amountGiven=${amountGiven}&paymentMethod=${paymentMethod}`;

    // Gửi POST request đến API
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json' // Header vẫn giữ nguyên
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Tính tiền thừa
            var changeAmount = amountGiven - totalAmount;

            // Hiển thị thông báo tùy thuộc vào phương thức thanh toán và kết quả
            if (changeAmount > 0) {
                toastr.success(`Thanh toán thành công! Tiền hoàn lại của bạn là: ${new Intl.NumberFormat('vi-VN').format(changeAmount)}.`);
            } else {
                toastr.success(`Thanh toán thành công! Không có tiền hoàn lại.`);
            }

            // Có thể chuyển hướng hoặc cập nhật giao diện sau khi thành công
            setTimeout(function () {
                window.location.reload(); // Reload trang
            }, 5000);        } else {
            // Thông báo lỗi nếu thất bại
            toastr.error(`Có lỗi xảy ra khi thanh toán: ${data.message || 'Vui lòng thử lại sau'}.`);
        }
    })
    .catch(error => {
        // Xử lý lỗi khi gọi API
        console.error("Error during checkout:", error);
        toastr.error(`Đã xảy ra lỗi khi thực hiện thanh toán. Vui lòng thử lại sau. Lỗi: ${error.message || "Unknown error"}`);
    });
});

// Định dạng số tiền cho input amountGiven (hiển thị dưới dạng 1.000.000 khi người dùng nhập)
document.getElementById('amountGivenInput').addEventListener('input', function () {
    var amount = this.value.replace(/[^\d]/g, ''); // Loại bỏ ký tự không phải số
    if (amount) {
        // Hiển thị với định dạng 1.000.000 cho số tiền 1000000
        this.value = new Intl.NumberFormat('vi-VN').format(amount); 
    }
});

    </script>




<!---------------------------------------->

}


